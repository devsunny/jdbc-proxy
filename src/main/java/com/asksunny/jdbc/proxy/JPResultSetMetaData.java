/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.asksunny.jdbc.proxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-27")
public class JPResultSetMetaData implements org.apache.thrift.TBase<JPResultSetMetaData, JPResultSetMetaData._Fields>, java.io.Serializable, Cloneable, Comparable<JPResultSetMetaData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JPResultSetMetaData");

  private static final org.apache.thrift.protocol.TField RESULT_SET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("resultSetId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("columnCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_META_DATAS_FIELD_DESC = new org.apache.thrift.protocol.TField("columnMetaDatas", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JPResultSetMetaDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JPResultSetMetaDataTupleSchemeFactory());
  }

  public String resultSetId; // required
  public int columnCount; // required
  public List<JPColumnMetaData> columnMetaDatas; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT_SET_ID((short)1, "resultSetId"),
    COLUMN_COUNT((short)2, "columnCount"),
    COLUMN_META_DATAS((short)3, "columnMetaDatas");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_SET_ID
          return RESULT_SET_ID;
        case 2: // COLUMN_COUNT
          return COLUMN_COUNT;
        case 3: // COLUMN_META_DATAS
          return COLUMN_META_DATAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLUMNCOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_SET_ID, new org.apache.thrift.meta_data.FieldMetaData("resultSetId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("columnCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLUMN_META_DATAS, new org.apache.thrift.meta_data.FieldMetaData("columnMetaDatas", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "JPColumnMetaDataList")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JPResultSetMetaData.class, metaDataMap);
  }

  public JPResultSetMetaData() {
  }

  public JPResultSetMetaData(
    String resultSetId,
    int columnCount,
    List<JPColumnMetaData> columnMetaDatas)
  {
    this();
    this.resultSetId = resultSetId;
    this.columnCount = columnCount;
    setColumnCountIsSet(true);
    this.columnMetaDatas = columnMetaDatas;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JPResultSetMetaData(JPResultSetMetaData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetResultSetId()) {
      this.resultSetId = other.resultSetId;
    }
    this.columnCount = other.columnCount;
    if (other.isSetColumnMetaDatas()) {
      this.columnMetaDatas = other.columnMetaDatas;
    }
  }

  public JPResultSetMetaData deepCopy() {
    return new JPResultSetMetaData(this);
  }

  @Override
  public void clear() {
    this.resultSetId = null;
    setColumnCountIsSet(false);
    this.columnCount = 0;
    this.columnMetaDatas = null;
  }

  public String getResultSetId() {
    return this.resultSetId;
  }

  public JPResultSetMetaData setResultSetId(String resultSetId) {
    this.resultSetId = resultSetId;
    return this;
  }

  public void unsetResultSetId() {
    this.resultSetId = null;
  }

  /** Returns true if field resultSetId is set (has been assigned a value) and false otherwise */
  public boolean isSetResultSetId() {
    return this.resultSetId != null;
  }

  public void setResultSetIdIsSet(boolean value) {
    if (!value) {
      this.resultSetId = null;
    }
  }

  public int getColumnCount() {
    return this.columnCount;
  }

  public JPResultSetMetaData setColumnCount(int columnCount) {
    this.columnCount = columnCount;
    setColumnCountIsSet(true);
    return this;
  }

  public void unsetColumnCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COLUMNCOUNT_ISSET_ID);
  }

  /** Returns true if field columnCount is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COLUMNCOUNT_ISSET_ID);
  }

  public void setColumnCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COLUMNCOUNT_ISSET_ID, value);
  }

  public int getColumnMetaDatasSize() {
    return (this.columnMetaDatas == null) ? 0 : this.columnMetaDatas.size();
  }

  public java.util.Iterator<JPColumnMetaData> getColumnMetaDatasIterator() {
    return (this.columnMetaDatas == null) ? null : this.columnMetaDatas.iterator();
  }

  public void addToColumnMetaDatas(JPColumnMetaData elem) {
    if (this.columnMetaDatas == null) {
      this.columnMetaDatas = new ArrayList<JPColumnMetaData>();
    }
    this.columnMetaDatas.add(elem);
  }

  public List<JPColumnMetaData> getColumnMetaDatas() {
    return this.columnMetaDatas;
  }

  public JPResultSetMetaData setColumnMetaDatas(List<JPColumnMetaData> columnMetaDatas) {
    this.columnMetaDatas = columnMetaDatas;
    return this;
  }

  public void unsetColumnMetaDatas() {
    this.columnMetaDatas = null;
  }

  /** Returns true if field columnMetaDatas is set (has been assigned a value) and false otherwise */
  public boolean isSetColumnMetaDatas() {
    return this.columnMetaDatas != null;
  }

  public void setColumnMetaDatasIsSet(boolean value) {
    if (!value) {
      this.columnMetaDatas = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT_SET_ID:
      if (value == null) {
        unsetResultSetId();
      } else {
        setResultSetId((String)value);
      }
      break;

    case COLUMN_COUNT:
      if (value == null) {
        unsetColumnCount();
      } else {
        setColumnCount((Integer)value);
      }
      break;

    case COLUMN_META_DATAS:
      if (value == null) {
        unsetColumnMetaDatas();
      } else {
        setColumnMetaDatas((List<JPColumnMetaData>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_SET_ID:
      return getResultSetId();

    case COLUMN_COUNT:
      return Integer.valueOf(getColumnCount());

    case COLUMN_META_DATAS:
      return getColumnMetaDatas();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT_SET_ID:
      return isSetResultSetId();
    case COLUMN_COUNT:
      return isSetColumnCount();
    case COLUMN_META_DATAS:
      return isSetColumnMetaDatas();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JPResultSetMetaData)
      return this.equals((JPResultSetMetaData)that);
    return false;
  }

  public boolean equals(JPResultSetMetaData that) {
    if (that == null)
      return false;

    boolean this_present_resultSetId = true && this.isSetResultSetId();
    boolean that_present_resultSetId = true && that.isSetResultSetId();
    if (this_present_resultSetId || that_present_resultSetId) {
      if (!(this_present_resultSetId && that_present_resultSetId))
        return false;
      if (!this.resultSetId.equals(that.resultSetId))
        return false;
    }

    boolean this_present_columnCount = true;
    boolean that_present_columnCount = true;
    if (this_present_columnCount || that_present_columnCount) {
      if (!(this_present_columnCount && that_present_columnCount))
        return false;
      if (this.columnCount != that.columnCount)
        return false;
    }

    boolean this_present_columnMetaDatas = true && this.isSetColumnMetaDatas();
    boolean that_present_columnMetaDatas = true && that.isSetColumnMetaDatas();
    if (this_present_columnMetaDatas || that_present_columnMetaDatas) {
      if (!(this_present_columnMetaDatas && that_present_columnMetaDatas))
        return false;
      if (!this.columnMetaDatas.equals(that.columnMetaDatas))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_resultSetId = true && (isSetResultSetId());
    list.add(present_resultSetId);
    if (present_resultSetId)
      list.add(resultSetId);

    boolean present_columnCount = true;
    list.add(present_columnCount);
    if (present_columnCount)
      list.add(columnCount);

    boolean present_columnMetaDatas = true && (isSetColumnMetaDatas());
    list.add(present_columnMetaDatas);
    if (present_columnMetaDatas)
      list.add(columnMetaDatas);

    return list.hashCode();
  }

  @Override
  public int compareTo(JPResultSetMetaData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResultSetId()).compareTo(other.isSetResultSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultSetId, other.resultSetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnCount()).compareTo(other.isSetColumnCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnCount, other.columnCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumnMetaDatas()).compareTo(other.isSetColumnMetaDatas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumnMetaDatas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columnMetaDatas, other.columnMetaDatas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JPResultSetMetaData(");
    boolean first = true;

    sb.append("resultSetId:");
    if (this.resultSetId == null) {
      sb.append("null");
    } else {
      sb.append(this.resultSetId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnCount:");
    sb.append(this.columnCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnMetaDatas:");
    if (this.columnMetaDatas == null) {
      sb.append("null");
    } else {
      sb.append(this.columnMetaDatas);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (resultSetId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'resultSetId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'columnCount' because it's a primitive and you chose the non-beans generator.
    if (columnMetaDatas == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnMetaDatas' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JPResultSetMetaDataStandardSchemeFactory implements SchemeFactory {
    public JPResultSetMetaDataStandardScheme getScheme() {
      return new JPResultSetMetaDataStandardScheme();
    }
  }

  private static class JPResultSetMetaDataStandardScheme extends StandardScheme<JPResultSetMetaData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JPResultSetMetaData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_SET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultSetId = iprot.readString();
              struct.setResultSetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.columnCount = iprot.readI32();
              struct.setColumnCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_META_DATAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.columnMetaDatas = new ArrayList<JPColumnMetaData>(_list8.size);
                JPColumnMetaData _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new JPColumnMetaData();
                  _elem9.read(iprot);
                  struct.columnMetaDatas.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setColumnMetaDatasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetColumnCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'columnCount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JPResultSetMetaData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.resultSetId != null) {
        oprot.writeFieldBegin(RESULT_SET_ID_FIELD_DESC);
        oprot.writeString(struct.resultSetId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COLUMN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.columnCount);
      oprot.writeFieldEnd();
      if (struct.columnMetaDatas != null) {
        oprot.writeFieldBegin(COLUMN_META_DATAS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columnMetaDatas.size()));
          for (JPColumnMetaData _iter11 : struct.columnMetaDatas)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JPResultSetMetaDataTupleSchemeFactory implements SchemeFactory {
    public JPResultSetMetaDataTupleScheme getScheme() {
      return new JPResultSetMetaDataTupleScheme();
    }
  }

  private static class JPResultSetMetaDataTupleScheme extends TupleScheme<JPResultSetMetaData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JPResultSetMetaData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.resultSetId);
      oprot.writeI32(struct.columnCount);
      {
        oprot.writeI32(struct.columnMetaDatas.size());
        for (JPColumnMetaData _iter12 : struct.columnMetaDatas)
        {
          _iter12.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JPResultSetMetaData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.resultSetId = iprot.readString();
      struct.setResultSetIdIsSet(true);
      struct.columnCount = iprot.readI32();
      struct.setColumnCountIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.columnMetaDatas = new ArrayList<JPColumnMetaData>(_list13.size);
        JPColumnMetaData _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new JPColumnMetaData();
          _elem14.read(iprot);
          struct.columnMetaDatas.add(_elem14);
        }
      }
      struct.setColumnMetaDatasIsSet(true);
    }
  }

}

