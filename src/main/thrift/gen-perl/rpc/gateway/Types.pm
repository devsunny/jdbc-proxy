#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package rpc::gateway::DataType;
use constant STRING => 0;
use constant INTEGER => 1;
use constant LONG => 2;
use constant DOUBLE => 3;
use constant SHORT => 4;
use constant STRING_ARRAY => 20;
use constant INTEGER_ARRAY => 21;
use constant LONG_ARRAY => 22;
use constant DOUBLE_ARRAY => 23;
use constant SHORT_ARRAY => 24;
use constant JSON => 41;
use constant XML => 42;
use constant VOID => 99;
package rpc::gateway::JPValueObject;
use base qw(Class::Accessor);
rpc::gateway::JPValueObject->mk_accessors( qw( type value ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{type} = undef;
  $self->{value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{value}) {
      $self->{value} = $vals->{value};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JPValueObject';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JPValueObject');
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', TType::I32, 1);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{value}) {
    $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
    $xfer += $output->writeString($self->{value});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::JPQueryParamMetaData;
use base qw(Class::Accessor);
rpc::gateway::JPQueryParamMetaData->mk_accessors( qw( type mode typeName signed nullable precision scale className ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{type} = undef;
  $self->{mode} = undef;
  $self->{typeName} = undef;
  $self->{signed} = undef;
  $self->{nullable} = undef;
  $self->{precision} = undef;
  $self->{scale} = undef;
  $self->{className} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
    if (defined $vals->{mode}) {
      $self->{mode} = $vals->{mode};
    }
    if (defined $vals->{typeName}) {
      $self->{typeName} = $vals->{typeName};
    }
    if (defined $vals->{signed}) {
      $self->{signed} = $vals->{signed};
    }
    if (defined $vals->{nullable}) {
      $self->{nullable} = $vals->{nullable};
    }
    if (defined $vals->{precision}) {
      $self->{precision} = $vals->{precision};
    }
    if (defined $vals->{scale}) {
      $self->{scale} = $vals->{scale};
    }
    if (defined $vals->{className}) {
      $self->{className} = $vals->{className};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JPQueryParamMetaData';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{mode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{typeName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{signed});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{nullable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{precision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{scale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{className});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JPQueryParamMetaData');
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', TType::I32, 1);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{mode}) {
    $xfer += $output->writeFieldBegin('mode', TType::I32, 2);
    $xfer += $output->writeI32($self->{mode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{typeName}) {
    $xfer += $output->writeFieldBegin('typeName', TType::STRING, 3);
    $xfer += $output->writeString($self->{typeName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{signed}) {
    $xfer += $output->writeFieldBegin('signed', TType::BOOL, 4);
    $xfer += $output->writeBool($self->{signed});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{nullable}) {
    $xfer += $output->writeFieldBegin('nullable', TType::BOOL, 5);
    $xfer += $output->writeBool($self->{nullable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{precision}) {
    $xfer += $output->writeFieldBegin('precision', TType::I32, 6);
    $xfer += $output->writeI32($self->{precision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{scale}) {
    $xfer += $output->writeFieldBegin('scale', TType::I32, 7);
    $xfer += $output->writeI32($self->{scale});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{className}) {
    $xfer += $output->writeFieldBegin('className', TType::STRING, 8);
    $xfer += $output->writeString($self->{className});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::JPQueryParameter;
use base qw(Class::Accessor);
rpc::gateway::JPQueryParameter->mk_accessors( qw( index value type ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{index} = undef;
  $self->{value} = undef;
  $self->{type} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{index}) {
      $self->{index} = $vals->{index};
    }
    if (defined $vals->{value}) {
      $self->{value} = $vals->{value};
    }
    if (defined $vals->{type}) {
      $self->{type} = $vals->{type};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JPQueryParameter';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{index});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{type});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JPQueryParameter');
  if (defined $self->{index}) {
    $xfer += $output->writeFieldBegin('index', TType::I32, 1);
    $xfer += $output->writeI32($self->{index});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{value}) {
    $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
    $xfer += $output->writeString($self->{value});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type}) {
    $xfer += $output->writeFieldBegin('type', TType::I32, 3);
    $xfer += $output->writeI32($self->{type});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::JPParameterMetaData;
use base qw(Class::Accessor);
rpc::gateway::JPParameterMetaData->mk_accessors( qw( statementId paramCount params ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{statementId} = undef;
  $self->{paramCount} = undef;
  $self->{params} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{statementId}) {
      $self->{statementId} = $vals->{statementId};
    }
    if (defined $vals->{paramCount}) {
      $self->{paramCount} = $vals->{paramCount};
    }
    if (defined $vals->{params}) {
      $self->{params} = $vals->{params};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JPParameterMetaData';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{statementId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{paramCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size0 = 0;
          $self->{params} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $elem5 = new rpc::gateway::JPQueryParamMetaData();
            $xfer += $elem5->read($input);
            push(@{$self->{params}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JPParameterMetaData');
  if (defined $self->{statementId}) {
    $xfer += $output->writeFieldBegin('statementId', TType::STRING, 1);
    $xfer += $output->writeString($self->{statementId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{paramCount}) {
    $xfer += $output->writeFieldBegin('paramCount', TType::I32, 2);
    $xfer += $output->writeI32($self->{paramCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{params}) {
    $xfer += $output->writeFieldBegin('params', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{params}}));
      {
        foreach my $iter6 (@{$self->{params}}) 
        {
          $xfer += ${iter6}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::JPColumnMetaData;
use base qw(Class::Accessor);
rpc::gateway::JPColumnMetaData->mk_accessors( qw( columnType columnDisplaySize columnLabel columnName columnTypeName precision scale tableName schemaName catalogName columnClassName nullable readOnly autoIncrement caseSensitive definitelyWritable currency searchable signed writable ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{columnType} = undef;
  $self->{columnDisplaySize} = undef;
  $self->{columnLabel} = undef;
  $self->{columnName} = undef;
  $self->{columnTypeName} = undef;
  $self->{precision} = undef;
  $self->{scale} = undef;
  $self->{tableName} = undef;
  $self->{schemaName} = undef;
  $self->{catalogName} = undef;
  $self->{columnClassName} = undef;
  $self->{nullable} = undef;
  $self->{readOnly} = undef;
  $self->{autoIncrement} = undef;
  $self->{caseSensitive} = undef;
  $self->{definitelyWritable} = undef;
  $self->{currency} = undef;
  $self->{searchable} = undef;
  $self->{signed} = undef;
  $self->{writable} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{columnType}) {
      $self->{columnType} = $vals->{columnType};
    }
    if (defined $vals->{columnDisplaySize}) {
      $self->{columnDisplaySize} = $vals->{columnDisplaySize};
    }
    if (defined $vals->{columnLabel}) {
      $self->{columnLabel} = $vals->{columnLabel};
    }
    if (defined $vals->{columnName}) {
      $self->{columnName} = $vals->{columnName};
    }
    if (defined $vals->{columnTypeName}) {
      $self->{columnTypeName} = $vals->{columnTypeName};
    }
    if (defined $vals->{precision}) {
      $self->{precision} = $vals->{precision};
    }
    if (defined $vals->{scale}) {
      $self->{scale} = $vals->{scale};
    }
    if (defined $vals->{tableName}) {
      $self->{tableName} = $vals->{tableName};
    }
    if (defined $vals->{schemaName}) {
      $self->{schemaName} = $vals->{schemaName};
    }
    if (defined $vals->{catalogName}) {
      $self->{catalogName} = $vals->{catalogName};
    }
    if (defined $vals->{columnClassName}) {
      $self->{columnClassName} = $vals->{columnClassName};
    }
    if (defined $vals->{nullable}) {
      $self->{nullable} = $vals->{nullable};
    }
    if (defined $vals->{readOnly}) {
      $self->{readOnly} = $vals->{readOnly};
    }
    if (defined $vals->{autoIncrement}) {
      $self->{autoIncrement} = $vals->{autoIncrement};
    }
    if (defined $vals->{caseSensitive}) {
      $self->{caseSensitive} = $vals->{caseSensitive};
    }
    if (defined $vals->{definitelyWritable}) {
      $self->{definitelyWritable} = $vals->{definitelyWritable};
    }
    if (defined $vals->{currency}) {
      $self->{currency} = $vals->{currency};
    }
    if (defined $vals->{searchable}) {
      $self->{searchable} = $vals->{searchable};
    }
    if (defined $vals->{signed}) {
      $self->{signed} = $vals->{signed};
    }
    if (defined $vals->{writable}) {
      $self->{writable} = $vals->{writable};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JPColumnMetaData';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{columnType});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{columnDisplaySize});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnLabel});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnTypeName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{precision});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{scale});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tableName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{schemaName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{catalogName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnClassName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{nullable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{readOnly});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^14$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{autoIncrement});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^15$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{caseSensitive});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^16$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{definitelyWritable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^17$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{currency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^18$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{searchable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^19$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{signed});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^20$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{writable});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JPColumnMetaData');
  if (defined $self->{columnType}) {
    $xfer += $output->writeFieldBegin('columnType', TType::I32, 1);
    $xfer += $output->writeI32($self->{columnType});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnDisplaySize}) {
    $xfer += $output->writeFieldBegin('columnDisplaySize', TType::I32, 2);
    $xfer += $output->writeI32($self->{columnDisplaySize});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnLabel}) {
    $xfer += $output->writeFieldBegin('columnLabel', TType::STRING, 3);
    $xfer += $output->writeString($self->{columnLabel});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnName}) {
    $xfer += $output->writeFieldBegin('columnName', TType::STRING, 4);
    $xfer += $output->writeString($self->{columnName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnTypeName}) {
    $xfer += $output->writeFieldBegin('columnTypeName', TType::STRING, 5);
    $xfer += $output->writeString($self->{columnTypeName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{precision}) {
    $xfer += $output->writeFieldBegin('precision', TType::I32, 6);
    $xfer += $output->writeI32($self->{precision});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{scale}) {
    $xfer += $output->writeFieldBegin('scale', TType::I32, 7);
    $xfer += $output->writeI32($self->{scale});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{tableName}) {
    $xfer += $output->writeFieldBegin('tableName', TType::STRING, 8);
    $xfer += $output->writeString($self->{tableName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{schemaName}) {
    $xfer += $output->writeFieldBegin('schemaName', TType::STRING, 9);
    $xfer += $output->writeString($self->{schemaName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{catalogName}) {
    $xfer += $output->writeFieldBegin('catalogName', TType::STRING, 10);
    $xfer += $output->writeString($self->{catalogName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnClassName}) {
    $xfer += $output->writeFieldBegin('columnClassName', TType::STRING, 11);
    $xfer += $output->writeString($self->{columnClassName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{nullable}) {
    $xfer += $output->writeFieldBegin('nullable', TType::BOOL, 12);
    $xfer += $output->writeBool($self->{nullable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{readOnly}) {
    $xfer += $output->writeFieldBegin('readOnly', TType::BOOL, 13);
    $xfer += $output->writeBool($self->{readOnly});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{autoIncrement}) {
    $xfer += $output->writeFieldBegin('autoIncrement', TType::BOOL, 14);
    $xfer += $output->writeBool($self->{autoIncrement});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{caseSensitive}) {
    $xfer += $output->writeFieldBegin('caseSensitive', TType::BOOL, 15);
    $xfer += $output->writeBool($self->{caseSensitive});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{definitelyWritable}) {
    $xfer += $output->writeFieldBegin('definitelyWritable', TType::BOOL, 16);
    $xfer += $output->writeBool($self->{definitelyWritable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{currency}) {
    $xfer += $output->writeFieldBegin('currency', TType::BOOL, 17);
    $xfer += $output->writeBool($self->{currency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{searchable}) {
    $xfer += $output->writeFieldBegin('searchable', TType::BOOL, 18);
    $xfer += $output->writeBool($self->{searchable});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{signed}) {
    $xfer += $output->writeFieldBegin('signed', TType::BOOL, 19);
    $xfer += $output->writeBool($self->{signed});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{writable}) {
    $xfer += $output->writeFieldBegin('writable', TType::BOOL, 20);
    $xfer += $output->writeBool($self->{writable});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::JPResultSetMetaData;
use base qw(Class::Accessor);
rpc::gateway::JPResultSetMetaData->mk_accessors( qw( resultSetId columnCount columnMetaDatas ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{resultSetId} = undef;
  $self->{columnCount} = undef;
  $self->{columnMetaDatas} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{resultSetId}) {
      $self->{resultSetId} = $vals->{resultSetId};
    }
    if (defined $vals->{columnCount}) {
      $self->{columnCount} = $vals->{columnCount};
    }
    if (defined $vals->{columnMetaDatas}) {
      $self->{columnMetaDatas} = $vals->{columnMetaDatas};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JPResultSetMetaData';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{resultSetId});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{columnCount});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size7 = 0;
          $self->{columnMetaDatas} = [];
          my $_etype10 = 0;
          $xfer += $input->readListBegin(\$_etype10, \$_size7);
          for (my $_i11 = 0; $_i11 < $_size7; ++$_i11)
          {
            my $elem12 = undef;
            $elem12 = new rpc::gateway::JPColumnMetaData();
            $xfer += $elem12->read($input);
            push(@{$self->{columnMetaDatas}},$elem12);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JPResultSetMetaData');
  if (defined $self->{resultSetId}) {
    $xfer += $output->writeFieldBegin('resultSetId', TType::STRING, 1);
    $xfer += $output->writeString($self->{resultSetId});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnCount}) {
    $xfer += $output->writeFieldBegin('columnCount', TType::I32, 2);
    $xfer += $output->writeI32($self->{columnCount});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnMetaDatas}) {
    $xfer += $output->writeFieldBegin('columnMetaDatas', TType::LIST, 3);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{columnMetaDatas}}));
      {
        foreach my $iter13 (@{$self->{columnMetaDatas}}) 
        {
          $xfer += ${iter13}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::JPSimpleQueryResultSet;
use base qw(Class::Accessor);
rpc::gateway::JPSimpleQueryResultSet->mk_accessors( qw( resultMetaData dataRows ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{resultMetaData} = undef;
  $self->{dataRows} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{resultMetaData}) {
      $self->{resultMetaData} = $vals->{resultMetaData};
    }
    if (defined $vals->{dataRows}) {
      $self->{dataRows} = $vals->{dataRows};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'JPSimpleQueryResultSet';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{resultMetaData} = new rpc::gateway::JPResultSetMetaData();
        $xfer += $self->{resultMetaData}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size14 = 0;
          $self->{dataRows} = [];
          my $_etype17 = 0;
          $xfer += $input->readListBegin(\$_etype17, \$_size14);
          for (my $_i18 = 0; $_i18 < $_size14; ++$_i18)
          {
            my $elem19 = undef;
            {
              my $_size20 = 0;
              $elem19 = [];
              my $_etype23 = 0;
              $xfer += $input->readListBegin(\$_etype23, \$_size20);
              for (my $_i24 = 0; $_i24 < $_size20; ++$_i24)
              {
                my $elem25 = undef;
                $xfer += $input->readString(\$elem25);
                push(@{$elem19},$elem25);
              }
              $xfer += $input->readListEnd();
            }
            push(@{$self->{dataRows}},$elem19);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('JPSimpleQueryResultSet');
  if (defined $self->{resultMetaData}) {
    $xfer += $output->writeFieldBegin('resultMetaData', TType::STRUCT, 1);
    $xfer += $self->{resultMetaData}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{dataRows}) {
    $xfer += $output->writeFieldBegin('dataRows', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::LIST, scalar(@{$self->{dataRows}}));
      {
        foreach my $iter26 (@{$self->{dataRows}}) 
        {
          {
            $xfer += $output->writeListBegin(TType::STRING, scalar(@{${iter26}}));
            {
              foreach my $iter27 (@{${iter26}}) 
              {
                $xfer += $output->writeString($iter27);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::InvocationException;
use base qw(Thrift::TException);
use base qw(Class::Accessor);
rpc::gateway::InvocationException->mk_accessors( qw( errorCode sqlstate message ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{errorCode} = undef;
  $self->{sqlstate} = undef;
  $self->{message} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{errorCode}) {
      $self->{errorCode} = $vals->{errorCode};
    }
    if (defined $vals->{sqlstate}) {
      $self->{sqlstate} = $vals->{sqlstate};
    }
    if (defined $vals->{message}) {
      $self->{message} = $vals->{message};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'InvocationException';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{errorCode});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{sqlstate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{message});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('InvocationException');
  if (defined $self->{errorCode}) {
    $xfer += $output->writeFieldBegin('errorCode', TType::I32, 1);
    $xfer += $output->writeI32($self->{errorCode});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{sqlstate}) {
    $xfer += $output->writeFieldBegin('sqlstate', TType::STRING, 2);
    $xfer += $output->writeString($self->{sqlstate});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{message}) {
    $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
    $xfer += $output->writeString($self->{message});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
