#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use rpc::gateway::Types;

# HELPER FUNCTIONS AND STRUCTURES

package rpc::gateway::RpcGateway_ping_args;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_ping_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_ping_args');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_ping_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_ping_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_ping_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_ping_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I64, 0);
    $xfer += $output->writeI64($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeQuery_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeQuery_args->mk_accessors( qw( parameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeQuery_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size28 = 0;
          $self->{parameters} = [];
          my $_etype31 = 0;
          $xfer += $input->readListBegin(\$_etype31, \$_size28);
          for (my $_i32 = 0; $_i32 < $_size28; ++$_i32)
          {
            my $elem33 = undef;
            $elem33 = new rpc::gateway::JPValueObject();
            $xfer += $elem33->read($input);
            push(@{$self->{parameters}},$elem33);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeQuery_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter34 (@{$self->{parameters}}) 
        {
          $xfer += ${iter34}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeQuery_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeQuery_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeQuery_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new rpc::gateway::JPResultSetMetaData();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeQuery_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeSimpleQuery_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeSimpleQuery_args->mk_accessors( qw( datasource query ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{datasource} = undef;
  $self->{query} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{datasource}) {
      $self->{datasource} = $vals->{datasource};
    }
    if (defined $vals->{query}) {
      $self->{query} = $vals->{query};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeSimpleQuery_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{datasource});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{query});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeSimpleQuery_args');
  if (defined $self->{datasource}) {
    $xfer += $output->writeFieldBegin('datasource', TType::STRING, 1);
    $xfer += $output->writeString($self->{datasource});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{query}) {
    $xfer += $output->writeFieldBegin('query', TType::STRING, 2);
    $xfer += $output->writeString($self->{query});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeSimpleQuery_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeSimpleQuery_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeSimpleQuery_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new rpc::gateway::JPSimpleQueryResultSet();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeSimpleQuery_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeUpdate_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeUpdate_args->mk_accessors( qw( datasource query ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{datasource} = undef;
  $self->{query} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{datasource}) {
      $self->{datasource} = $vals->{datasource};
    }
    if (defined $vals->{query}) {
      $self->{query} = $vals->{query};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeUpdate_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{datasource});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{query});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeUpdate_args');
  if (defined $self->{datasource}) {
    $xfer += $output->writeFieldBegin('datasource', TType::STRING, 1);
    $xfer += $output->writeString($self->{datasource});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{query}) {
    $xfer += $output->writeFieldBegin('query', TType::STRING, 2);
    $xfer += $output->writeString($self->{query});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeUpdate_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeUpdate_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeUpdate_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeUpdate_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I32, 0);
    $xfer += $output->writeI32($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_prepareQuery_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_prepareQuery_args->mk_accessors( qw( parameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_prepareQuery_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size35 = 0;
          $self->{parameters} = [];
          my $_etype38 = 0;
          $xfer += $input->readListBegin(\$_etype38, \$_size35);
          for (my $_i39 = 0; $_i39 < $_size35; ++$_i39)
          {
            my $elem40 = undef;
            $elem40 = new rpc::gateway::JPValueObject();
            $xfer += $elem40->read($input);
            push(@{$self->{parameters}},$elem40);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_prepareQuery_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter41 (@{$self->{parameters}}) 
        {
          $xfer += ${iter41}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_prepareQuery_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_prepareQuery_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_prepareQuery_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new rpc::gateway::JPParameterMetaData();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_prepareQuery_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executePreparedQuery_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executePreparedQuery_args->mk_accessors( qw( parameters queryParameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  $self->{queryParameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
    if (defined $vals->{queryParameters}) {
      $self->{queryParameters} = $vals->{queryParameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executePreparedQuery_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size42 = 0;
          $self->{parameters} = [];
          my $_etype45 = 0;
          $xfer += $input->readListBegin(\$_etype45, \$_size42);
          for (my $_i46 = 0; $_i46 < $_size42; ++$_i46)
          {
            my $elem47 = undef;
            $elem47 = new rpc::gateway::JPValueObject();
            $xfer += $elem47->read($input);
            push(@{$self->{parameters}},$elem47);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size48 = 0;
          $self->{queryParameters} = [];
          my $_etype51 = 0;
          $xfer += $input->readListBegin(\$_etype51, \$_size48);
          for (my $_i52 = 0; $_i52 < $_size48; ++$_i52)
          {
            my $elem53 = undef;
            $elem53 = new rpc::gateway::JPQueryParameter();
            $xfer += $elem53->read($input);
            push(@{$self->{queryParameters}},$elem53);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executePreparedQuery_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter54 (@{$self->{parameters}}) 
        {
          $xfer += ${iter54}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{queryParameters}) {
    $xfer += $output->writeFieldBegin('queryParameters', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{queryParameters}}));
      {
        foreach my $iter55 (@{$self->{queryParameters}}) 
        {
          $xfer += ${iter55}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executePreparedQuery_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executePreparedQuery_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executePreparedQuery_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new rpc::gateway::JPResultSetMetaData();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executePreparedQuery_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executePreparedUpdate_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executePreparedUpdate_args->mk_accessors( qw( parameters queryParameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  $self->{queryParameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
    if (defined $vals->{queryParameters}) {
      $self->{queryParameters} = $vals->{queryParameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executePreparedUpdate_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size56 = 0;
          $self->{parameters} = [];
          my $_etype59 = 0;
          $xfer += $input->readListBegin(\$_etype59, \$_size56);
          for (my $_i60 = 0; $_i60 < $_size56; ++$_i60)
          {
            my $elem61 = undef;
            $elem61 = new rpc::gateway::JPValueObject();
            $xfer += $elem61->read($input);
            push(@{$self->{parameters}},$elem61);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size62 = 0;
          $self->{queryParameters} = [];
          my $_etype65 = 0;
          $xfer += $input->readListBegin(\$_etype65, \$_size62);
          for (my $_i66 = 0; $_i66 < $_size62; ++$_i66)
          {
            my $elem67 = undef;
            $elem67 = new rpc::gateway::JPQueryParameter();
            $xfer += $elem67->read($input);
            push(@{$self->{queryParameters}},$elem67);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executePreparedUpdate_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter68 (@{$self->{parameters}}) 
        {
          $xfer += ${iter68}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{queryParameters}) {
    $xfer += $output->writeFieldBegin('queryParameters', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{queryParameters}}));
      {
        foreach my $iter69 (@{$self->{queryParameters}}) 
        {
          $xfer += ${iter69}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executePreparedUpdate_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executePreparedUpdate_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executePreparedUpdate_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executePreparedUpdate_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I32, 0);
    $xfer += $output->writeI32($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_prepareCallableQuery_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_prepareCallableQuery_args->mk_accessors( qw( parameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_prepareCallableQuery_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size70 = 0;
          $self->{parameters} = [];
          my $_etype73 = 0;
          $xfer += $input->readListBegin(\$_etype73, \$_size70);
          for (my $_i74 = 0; $_i74 < $_size70; ++$_i74)
          {
            my $elem75 = undef;
            $elem75 = new rpc::gateway::JPValueObject();
            $xfer += $elem75->read($input);
            push(@{$self->{parameters}},$elem75);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_prepareCallableQuery_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter76 (@{$self->{parameters}}) 
        {
          $xfer += ${iter76}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_prepareCallableQuery_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_prepareCallableQuery_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_prepareCallableQuery_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new rpc::gateway::JPParameterMetaData();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_prepareCallableQuery_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeCallableQuery_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeCallableQuery_args->mk_accessors( qw( parameters queryParameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  $self->{queryParameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
    if (defined $vals->{queryParameters}) {
      $self->{queryParameters} = $vals->{queryParameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeCallableQuery_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size77 = 0;
          $self->{parameters} = [];
          my $_etype80 = 0;
          $xfer += $input->readListBegin(\$_etype80, \$_size77);
          for (my $_i81 = 0; $_i81 < $_size77; ++$_i81)
          {
            my $elem82 = undef;
            $elem82 = new rpc::gateway::JPValueObject();
            $xfer += $elem82->read($input);
            push(@{$self->{parameters}},$elem82);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size83 = 0;
          $self->{queryParameters} = [];
          my $_etype86 = 0;
          $xfer += $input->readListBegin(\$_etype86, \$_size83);
          for (my $_i87 = 0; $_i87 < $_size83; ++$_i87)
          {
            my $elem88 = undef;
            $elem88 = new rpc::gateway::JPQueryParameter();
            $xfer += $elem88->read($input);
            push(@{$self->{queryParameters}},$elem88);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeCallableQuery_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter89 (@{$self->{parameters}}) 
        {
          $xfer += ${iter89}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{queryParameters}) {
    $xfer += $output->writeFieldBegin('queryParameters', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{queryParameters}}));
      {
        foreach my $iter90 (@{$self->{queryParameters}}) 
        {
          $xfer += ${iter90}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeCallableQuery_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeCallableQuery_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeCallableQuery_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new rpc::gateway::JPResultSetMetaData();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeCallableQuery_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeCallableUpdate_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeCallableUpdate_args->mk_accessors( qw( parameters queryParameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  $self->{queryParameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
    if (defined $vals->{queryParameters}) {
      $self->{queryParameters} = $vals->{queryParameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeCallableUpdate_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size91 = 0;
          $self->{parameters} = [];
          my $_etype94 = 0;
          $xfer += $input->readListBegin(\$_etype94, \$_size91);
          for (my $_i95 = 0; $_i95 < $_size91; ++$_i95)
          {
            my $elem96 = undef;
            $elem96 = new rpc::gateway::JPValueObject();
            $xfer += $elem96->read($input);
            push(@{$self->{parameters}},$elem96);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size97 = 0;
          $self->{queryParameters} = [];
          my $_etype100 = 0;
          $xfer += $input->readListBegin(\$_etype100, \$_size97);
          for (my $_i101 = 0; $_i101 < $_size97; ++$_i101)
          {
            my $elem102 = undef;
            $elem102 = new rpc::gateway::JPQueryParameter();
            $xfer += $elem102->read($input);
            push(@{$self->{queryParameters}},$elem102);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeCallableUpdate_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter103 (@{$self->{parameters}}) 
        {
          $xfer += ${iter103}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{queryParameters}) {
    $xfer += $output->writeFieldBegin('queryParameters', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{queryParameters}}));
      {
        foreach my $iter104 (@{$self->{queryParameters}}) 
        {
          $xfer += ${iter104}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeCallableUpdate_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeCallableUpdate_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeCallableUpdate_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeCallableUpdate_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I32, 0);
    $xfer += $output->writeI32($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_fetchResult_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_fetchResult_args->mk_accessors( qw( parameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_fetchResult_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size105 = 0;
          $self->{parameters} = [];
          my $_etype108 = 0;
          $xfer += $input->readListBegin(\$_etype108, \$_size105);
          for (my $_i109 = 0; $_i109 < $_size105; ++$_i109)
          {
            my $elem110 = undef;
            $elem110 = new rpc::gateway::JPValueObject();
            $xfer += $elem110->read($input);
            push(@{$self->{parameters}},$elem110);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_fetchResult_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter111 (@{$self->{parameters}}) 
        {
          $xfer += ${iter111}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_fetchResult_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_fetchResult_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_fetchResult_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size112 = 0;
          $self->{success} = [];
          my $_etype115 = 0;
          $xfer += $input->readListBegin(\$_etype115, \$_size112);
          for (my $_i116 = 0; $_i116 < $_size112; ++$_i116)
          {
            my $elem117 = undef;
            {
              my $_size118 = 0;
              $elem117 = [];
              my $_etype121 = 0;
              $xfer += $input->readListBegin(\$_etype121, \$_size118);
              for (my $_i122 = 0; $_i122 < $_size118; ++$_i122)
              {
                my $elem123 = undef;
                $xfer += $input->readString(\$elem123);
                push(@{$elem117},$elem123);
              }
              $xfer += $input->readListEnd();
            }
            push(@{$self->{success}},$elem117);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_fetchResult_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::LIST, scalar(@{$self->{success}}));
      {
        foreach my $iter124 (@{$self->{success}}) 
        {
          {
            $xfer += $output->writeListBegin(TType::STRING, scalar(@{${iter124}}));
            {
              foreach my $iter125 (@{${iter124}}) 
              {
                $xfer += $output->writeString($iter125);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeComplexCommand_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeComplexCommand_args->mk_accessors( qw( parameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeComplexCommand_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size126 = 0;
          $self->{parameters} = [];
          my $_etype129 = 0;
          $xfer += $input->readListBegin(\$_etype129, \$_size126);
          for (my $_i130 = 0; $_i130 < $_size126; ++$_i130)
          {
            my $elem131 = undef;
            $elem131 = new rpc::gateway::JPValueObject();
            $xfer += $elem131->read($input);
            push(@{$self->{parameters}},$elem131);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeComplexCommand_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter132 (@{$self->{parameters}}) 
        {
          $xfer += ${iter132}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeComplexCommand_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeComplexCommand_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeComplexCommand_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size133 = 0;
          $self->{success} = [];
          my $_etype136 = 0;
          $xfer += $input->readListBegin(\$_etype136, \$_size133);
          for (my $_i137 = 0; $_i137 < $_size133; ++$_i137)
          {
            my $elem138 = undef;
            {
              my $_size139 = 0;
              $elem138 = [];
              my $_etype142 = 0;
              $xfer += $input->readListBegin(\$_etype142, \$_size139);
              for (my $_i143 = 0; $_i143 < $_size139; ++$_i143)
              {
                my $elem144 = undef;
                $xfer += $input->readString(\$elem144);
                push(@{$elem138},$elem144);
              }
              $xfer += $input->readListEnd();
            }
            push(@{$self->{success}},$elem138);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeComplexCommand_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $xfer += $output->writeListBegin(TType::LIST, scalar(@{$self->{success}}));
      {
        foreach my $iter145 (@{$self->{success}}) 
        {
          {
            $xfer += $output->writeListBegin(TType::STRING, scalar(@{${iter145}}));
            {
              foreach my $iter146 (@{${iter145}}) 
              {
                $xfer += $output->writeString($iter146);
              }
            }
            $xfer += $output->writeListEnd();
          }
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeCommand_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeCommand_args->mk_accessors( qw( parameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeCommand_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size147 = 0;
          $self->{parameters} = [];
          my $_etype150 = 0;
          $xfer += $input->readListBegin(\$_etype150, \$_size147);
          for (my $_i151 = 0; $_i151 < $_size147; ++$_i151)
          {
            my $elem152 = undef;
            $elem152 = new rpc::gateway::JPValueObject();
            $xfer += $elem152->read($input);
            push(@{$self->{parameters}},$elem152);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeCommand_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter153 (@{$self->{parameters}}) 
        {
          $xfer += ${iter153}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeCommand_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeCommand_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeCommand_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new rpc::gateway::JPValueObject();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeCommand_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeSimpleCommand_args;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeSimpleCommand_args->mk_accessors( qw( parameters ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{parameters} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{parameters}) {
      $self->{parameters} = $vals->{parameters};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeSimpleCommand_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size154 = 0;
          $self->{parameters} = [];
          my $_etype157 = 0;
          $xfer += $input->readListBegin(\$_etype157, \$_size154);
          for (my $_i158 = 0; $_i158 < $_size154; ++$_i158)
          {
            my $elem159 = undef;
            $elem159 = new rpc::gateway::JPValueObject();
            $xfer += $elem159->read($input);
            push(@{$self->{parameters}},$elem159);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeSimpleCommand_args');
  if (defined $self->{parameters}) {
    $xfer += $output->writeFieldBegin('parameters', TType::LIST, 1);
    {
      $xfer += $output->writeListBegin(TType::STRUCT, scalar(@{$self->{parameters}}));
      {
        foreach my $iter160 (@{$self->{parameters}}) 
        {
          $xfer += ${iter160}->write($output);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGateway_executeSimpleCommand_result;
use base qw(Class::Accessor);
rpc::gateway::RpcGateway_executeSimpleCommand_result->mk_accessors( qw( success ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{success} = undef;
  $self->{error} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'RpcGateway_executeSimpleCommand_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{error} = new rpc::gateway::InvocationException();
        $xfer += $self->{error}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('RpcGateway_executeSimpleCommand_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
    $xfer += $output->writeString($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
    $xfer += $self->{error}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package rpc::gateway::RpcGatewayIf;

use strict;


sub ping{
  my $self = shift;

  die 'implement interface';
}

sub executeQuery{
  my $self = shift;
  my $parameters = shift;

  die 'implement interface';
}

sub executeSimpleQuery{
  my $self = shift;
  my $datasource = shift;
  my $query = shift;

  die 'implement interface';
}

sub executeUpdate{
  my $self = shift;
  my $datasource = shift;
  my $query = shift;

  die 'implement interface';
}

sub prepareQuery{
  my $self = shift;
  my $parameters = shift;

  die 'implement interface';
}

sub executePreparedQuery{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

  die 'implement interface';
}

sub executePreparedUpdate{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

  die 'implement interface';
}

sub prepareCallableQuery{
  my $self = shift;
  my $parameters = shift;

  die 'implement interface';
}

sub executeCallableQuery{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

  die 'implement interface';
}

sub executeCallableUpdate{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

  die 'implement interface';
}

sub fetchResult{
  my $self = shift;
  my $parameters = shift;

  die 'implement interface';
}

sub executeComplexCommand{
  my $self = shift;
  my $parameters = shift;

  die 'implement interface';
}

sub executeCommand{
  my $self = shift;
  my $parameters = shift;

  die 'implement interface';
}

sub executeSimpleCommand{
  my $self = shift;
  my $parameters = shift;

  die 'implement interface';
}

package rpc::gateway::RpcGatewayRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub ping{
  my ($self, $request) = @_;

  return $self->{impl}->ping();
}

sub executeQuery{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  return $self->{impl}->executeQuery($parameters);
}

sub executeSimpleQuery{
  my ($self, $request) = @_;

  my $datasource = ($request->{'datasource'}) ? $request->{'datasource'} : undef;
  my $query = ($request->{'query'}) ? $request->{'query'} : undef;
  return $self->{impl}->executeSimpleQuery($datasource, $query);
}

sub executeUpdate{
  my ($self, $request) = @_;

  my $datasource = ($request->{'datasource'}) ? $request->{'datasource'} : undef;
  my $query = ($request->{'query'}) ? $request->{'query'} : undef;
  return $self->{impl}->executeUpdate($datasource, $query);
}

sub prepareQuery{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  return $self->{impl}->prepareQuery($parameters);
}

sub executePreparedQuery{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  my $queryParameters = ($request->{'queryParameters'}) ? $request->{'queryParameters'} : undef;
  return $self->{impl}->executePreparedQuery($parameters, $queryParameters);
}

sub executePreparedUpdate{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  my $queryParameters = ($request->{'queryParameters'}) ? $request->{'queryParameters'} : undef;
  return $self->{impl}->executePreparedUpdate($parameters, $queryParameters);
}

sub prepareCallableQuery{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  return $self->{impl}->prepareCallableQuery($parameters);
}

sub executeCallableQuery{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  my $queryParameters = ($request->{'queryParameters'}) ? $request->{'queryParameters'} : undef;
  return $self->{impl}->executeCallableQuery($parameters, $queryParameters);
}

sub executeCallableUpdate{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  my $queryParameters = ($request->{'queryParameters'}) ? $request->{'queryParameters'} : undef;
  return $self->{impl}->executeCallableUpdate($parameters, $queryParameters);
}

sub fetchResult{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  return $self->{impl}->fetchResult($parameters);
}

sub executeComplexCommand{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  return $self->{impl}->executeComplexCommand($parameters);
}

sub executeCommand{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  return $self->{impl}->executeCommand($parameters);
}

sub executeSimpleCommand{
  my ($self, $request) = @_;

  my $parameters = ($request->{'parameters'}) ? $request->{'parameters'} : undef;
  return $self->{impl}->executeSimpleCommand($parameters);
}

package rpc::gateway::RpcGatewayClient;


use base qw(rpc::gateway::RpcGatewayIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub ping{
  my $self = shift;

    $self->send_ping();
  return $self->recv_ping();
}

sub send_ping{
  my $self = shift;

  $self->{output}->writeMessageBegin('ping', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_ping_args();
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_ping{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_ping_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "ping failed: unknown result";
}
sub executeQuery{
  my $self = shift;
  my $parameters = shift;

    $self->send_executeQuery($parameters);
  return $self->recv_executeQuery();
}

sub send_executeQuery{
  my $self = shift;
  my $parameters = shift;

  $self->{output}->writeMessageBegin('executeQuery', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_executeQuery_args();
  $args->{parameters} = $parameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executeQuery{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_executeQuery_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executeQuery failed: unknown result";
}
sub executeSimpleQuery{
  my $self = shift;
  my $datasource = shift;
  my $query = shift;

    $self->send_executeSimpleQuery($datasource, $query);
  return $self->recv_executeSimpleQuery();
}

sub send_executeSimpleQuery{
  my $self = shift;
  my $datasource = shift;
  my $query = shift;

  $self->{output}->writeMessageBegin('executeSimpleQuery', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_executeSimpleQuery_args();
  $args->{datasource} = $datasource;
  $args->{query} = $query;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executeSimpleQuery{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_executeSimpleQuery_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executeSimpleQuery failed: unknown result";
}
sub executeUpdate{
  my $self = shift;
  my $datasource = shift;
  my $query = shift;

    $self->send_executeUpdate($datasource, $query);
  return $self->recv_executeUpdate();
}

sub send_executeUpdate{
  my $self = shift;
  my $datasource = shift;
  my $query = shift;

  $self->{output}->writeMessageBegin('executeUpdate', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_executeUpdate_args();
  $args->{datasource} = $datasource;
  $args->{query} = $query;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executeUpdate{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_executeUpdate_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executeUpdate failed: unknown result";
}
sub prepareQuery{
  my $self = shift;
  my $parameters = shift;

    $self->send_prepareQuery($parameters);
  return $self->recv_prepareQuery();
}

sub send_prepareQuery{
  my $self = shift;
  my $parameters = shift;

  $self->{output}->writeMessageBegin('prepareQuery', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_prepareQuery_args();
  $args->{parameters} = $parameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_prepareQuery{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_prepareQuery_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "prepareQuery failed: unknown result";
}
sub executePreparedQuery{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

    $self->send_executePreparedQuery($parameters, $queryParameters);
  return $self->recv_executePreparedQuery();
}

sub send_executePreparedQuery{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

  $self->{output}->writeMessageBegin('executePreparedQuery', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_executePreparedQuery_args();
  $args->{parameters} = $parameters;
  $args->{queryParameters} = $queryParameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executePreparedQuery{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_executePreparedQuery_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executePreparedQuery failed: unknown result";
}
sub executePreparedUpdate{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

    $self->send_executePreparedUpdate($parameters, $queryParameters);
  return $self->recv_executePreparedUpdate();
}

sub send_executePreparedUpdate{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

  $self->{output}->writeMessageBegin('executePreparedUpdate', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_executePreparedUpdate_args();
  $args->{parameters} = $parameters;
  $args->{queryParameters} = $queryParameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executePreparedUpdate{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_executePreparedUpdate_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executePreparedUpdate failed: unknown result";
}
sub prepareCallableQuery{
  my $self = shift;
  my $parameters = shift;

    $self->send_prepareCallableQuery($parameters);
  return $self->recv_prepareCallableQuery();
}

sub send_prepareCallableQuery{
  my $self = shift;
  my $parameters = shift;

  $self->{output}->writeMessageBegin('prepareCallableQuery', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_prepareCallableQuery_args();
  $args->{parameters} = $parameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_prepareCallableQuery{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_prepareCallableQuery_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "prepareCallableQuery failed: unknown result";
}
sub executeCallableQuery{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

    $self->send_executeCallableQuery($parameters, $queryParameters);
  return $self->recv_executeCallableQuery();
}

sub send_executeCallableQuery{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

  $self->{output}->writeMessageBegin('executeCallableQuery', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_executeCallableQuery_args();
  $args->{parameters} = $parameters;
  $args->{queryParameters} = $queryParameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executeCallableQuery{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_executeCallableQuery_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executeCallableQuery failed: unknown result";
}
sub executeCallableUpdate{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

    $self->send_executeCallableUpdate($parameters, $queryParameters);
  return $self->recv_executeCallableUpdate();
}

sub send_executeCallableUpdate{
  my $self = shift;
  my $parameters = shift;
  my $queryParameters = shift;

  $self->{output}->writeMessageBegin('executeCallableUpdate', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_executeCallableUpdate_args();
  $args->{parameters} = $parameters;
  $args->{queryParameters} = $queryParameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executeCallableUpdate{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_executeCallableUpdate_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executeCallableUpdate failed: unknown result";
}
sub fetchResult{
  my $self = shift;
  my $parameters = shift;

    $self->send_fetchResult($parameters);
  return $self->recv_fetchResult();
}

sub send_fetchResult{
  my $self = shift;
  my $parameters = shift;

  $self->{output}->writeMessageBegin('fetchResult', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_fetchResult_args();
  $args->{parameters} = $parameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_fetchResult{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_fetchResult_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "fetchResult failed: unknown result";
}
sub executeComplexCommand{
  my $self = shift;
  my $parameters = shift;

    $self->send_executeComplexCommand($parameters);
  return $self->recv_executeComplexCommand();
}

sub send_executeComplexCommand{
  my $self = shift;
  my $parameters = shift;

  $self->{output}->writeMessageBegin('executeComplexCommand', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_executeComplexCommand_args();
  $args->{parameters} = $parameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executeComplexCommand{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_executeComplexCommand_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executeComplexCommand failed: unknown result";
}
sub executeCommand{
  my $self = shift;
  my $parameters = shift;

    $self->send_executeCommand($parameters);
  return $self->recv_executeCommand();
}

sub send_executeCommand{
  my $self = shift;
  my $parameters = shift;

  $self->{output}->writeMessageBegin('executeCommand', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_executeCommand_args();
  $args->{parameters} = $parameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executeCommand{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_executeCommand_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executeCommand failed: unknown result";
}
sub executeSimpleCommand{
  my $self = shift;
  my $parameters = shift;

    $self->send_executeSimpleCommand($parameters);
  return $self->recv_executeSimpleCommand();
}

sub send_executeSimpleCommand{
  my $self = shift;
  my $parameters = shift;

  $self->{output}->writeMessageBegin('executeSimpleCommand', TMessageType::CALL, $self->{seqid});
  my $args = new rpc::gateway::RpcGateway_executeSimpleCommand_args();
  $args->{parameters} = $parameters;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_executeSimpleCommand{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new rpc::gateway::RpcGateway_executeSimpleCommand_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  if (defined $result->{error}) {
    die $result->{error};
  }
  die "executeSimpleCommand failed: unknown result";
}
package rpc::gateway::RpcGatewayProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_ping {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_ping_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_ping_result();
    $result->{success} = $self->{handler}->ping();
    $output->writeMessageBegin('ping', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executeQuery {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_executeQuery_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_executeQuery_result();
    eval {
      $result->{success} = $self->{handler}->executeQuery($args->parameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executeQuery', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executeSimpleQuery {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_executeSimpleQuery_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_executeSimpleQuery_result();
    eval {
      $result->{success} = $self->{handler}->executeSimpleQuery($args->datasource, $args->query);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executeSimpleQuery', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executeUpdate {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_executeUpdate_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_executeUpdate_result();
    eval {
      $result->{success} = $self->{handler}->executeUpdate($args->datasource, $args->query);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executeUpdate', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_prepareQuery {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_prepareQuery_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_prepareQuery_result();
    eval {
      $result->{success} = $self->{handler}->prepareQuery($args->parameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('prepareQuery', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executePreparedQuery {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_executePreparedQuery_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_executePreparedQuery_result();
    eval {
      $result->{success} = $self->{handler}->executePreparedQuery($args->parameters, $args->queryParameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executePreparedQuery', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executePreparedUpdate {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_executePreparedUpdate_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_executePreparedUpdate_result();
    eval {
      $result->{success} = $self->{handler}->executePreparedUpdate($args->parameters, $args->queryParameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executePreparedUpdate', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_prepareCallableQuery {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_prepareCallableQuery_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_prepareCallableQuery_result();
    eval {
      $result->{success} = $self->{handler}->prepareCallableQuery($args->parameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('prepareCallableQuery', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executeCallableQuery {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_executeCallableQuery_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_executeCallableQuery_result();
    eval {
      $result->{success} = $self->{handler}->executeCallableQuery($args->parameters, $args->queryParameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executeCallableQuery', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executeCallableUpdate {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_executeCallableUpdate_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_executeCallableUpdate_result();
    eval {
      $result->{success} = $self->{handler}->executeCallableUpdate($args->parameters, $args->queryParameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executeCallableUpdate', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_fetchResult {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_fetchResult_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_fetchResult_result();
    eval {
      $result->{success} = $self->{handler}->fetchResult($args->parameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('fetchResult', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executeComplexCommand {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_executeComplexCommand_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_executeComplexCommand_result();
    eval {
      $result->{success} = $self->{handler}->executeComplexCommand($args->parameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executeComplexCommand', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executeCommand {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_executeCommand_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_executeCommand_result();
    eval {
      $result->{success} = $self->{handler}->executeCommand($args->parameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executeCommand', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

sub process_executeSimpleCommand {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new rpc::gateway::RpcGateway_executeSimpleCommand_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new rpc::gateway::RpcGateway_executeSimpleCommand_result();
    eval {
      $result->{success} = $self->{handler}->executeSimpleCommand($args->parameters);
    }; if( UNIVERSAL::isa($@,'rpc::gateway::InvocationException') ){ 
      $result->{error} = $@;
    }
    $output->writeMessageBegin('executeSimpleCommand', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->writeMessageEnd();
    $output->getTransport()->flush();
}

1;
